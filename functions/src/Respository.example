import {
  Firestore,
  CollectionReference,
  DocumentData,
  Timestamp,
} from '@google-cloud/firestore'
import * as firebaseAdmin from 'firebase-admin'
import {toFirestore} from './toFirestore'

export interface ReadonlyRepository<ID extends string, E extends {id: ID}> {
  find(id: ID): Promise<E | undefined>
  findOrThrow(id: ID): Promise<E>
  findAll(): Promise<E[]>
}
export interface WriteRepository<ID extends string, E extends {id: ID}> {
  create(entity: E): Promise<E>
  update(entity: E): Promise<E>
}

export class FirestoreRepository<ID extends string, E extends {id: ID}>
  implements ReadonlyRepository<ID, E>, WriteRepository<ID, E> {
  protected readonly _db: Firestore
  protected readonly _colPrefix: string
  readonly col: CollectionReference
  protected readonly entityName: string

  constructor(entityName: string, _db?: Firestore, _colPrefix: string = '') {
    this._db = _db !== undefined ? _db : firebaseAdmin.firestore()
    this._colPrefix = _colPrefix
    this.entityName = entityName
    this.col = this._db.collection(_colPrefix + this.entityName)
  }

  async find(id: ID): Promise<E | undefined> {
    const snap = await this.col.doc(id).get()
    const data = snap.data()

    if (!snap.exists || data === undefined) {
      return undefined
    }

    return data as E
  }

  async findOrThrow(id: ID): Promise<E> {
    const e = await this.find(id)
    if (e === undefined) {
      // tslint:disable-next-line: prefer-template
      throw new Error('Entity not found : ' + this.entityName + 'Id ' + id)
    }
    return e
  }

  async findAll(): Promise<E[]> {
    const snap = await this.col.get()
    return snap.docs.map(d => d.data() as E)
  }

  async create(entity: E): Promise<E> {
    console.log('create Entity called', entity)

    const now = Timestamp.now()

    const firestoreDoc = toFirestore({
      ...entity,
      createdAt: now,
      updatedAt: now,
    })

    console.log('Collection', this.col.path)

    await this.col.doc(entity.id as string).create(firestoreDoc)
    return firestoreDoc as E
  }

  async update(data: E): Promise<E> {
    const firestorePartial: DocumentData = {
      ...data,
      updatedAt: Timestamp.now(),
    }
    delete firestorePartial['createdAt']
    console.log('updating partial doc', firestorePartial)

    await this.col.doc(data.id).update(firestorePartial)
    return data
  }
}
